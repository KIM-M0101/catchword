package test;

import javax.swing.*;
import javax.swing.border.BevelBorder;
import javax.swing.border.LineBorder;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;
import java.util.Random;

public class Catchword extends JFrame implements ActionListener {
	Random random = new Random();
	private ArrayList<String> words = loadWordsFromFile("words.txt");
	private int currentWordIndex;
	private String targetWord;
	
	private JLabel targetLabel;
	private JLabel timerLabel;
	private JLabel levelLabel;  // 난이도와 문제 번호를 표시할 레이블
	private JButton[][] buttons = new JButton[3][3];
	private int currentIndex = 0; // 현재 글자 인덱스
	private int time = 30; // 제한 시간을 30초로 설정
	private int plusTime = 0;
	private Timer timer;
	private int totalScore = 0;
	private int score = 0;
	private static int MAX_ROUNDS = 5;
	private int roundsCompleted = 0;
	private int finalScore = 0;
	private int currentLevel = 1; // 현재 단계

	private static Difficulty[] difficulties = {
			new Difficulty(60, 3, 5, 1, 0),
			new Difficulty(50, 4, 5, 2, 0),
			new Difficulty(40, 5, 5, 3, 3),
			new Difficulty(30, 6, 5, 4, 4),
			new Difficulty(30, 7, 5, 5, 5)
	};

	private void chooseDifficulty() {
		String[] options = { "1단계", "2단계", "3단계", "4단계", "5단계" };
		int choice = JOptionPane.showOptionDialog(this, "난이도를 선택하세요:", "난이도 선택", JOptionPane.DEFAULT_OPTION,
				JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

		Difficulty selectedDifficulty = difficulties[choice];
		time = selectedDifficulty.timeLimit;
		MAX_ROUNDS = selectedDifficulty.numRounds;
		score = selectedDifficulty.score;
		plusTime = selectedDifficulty.plusTime;
		words = loadWordsWithLength(selectedDifficulty.wordLength);
		currentLevel = choice + 1; // 선택한 난이도 (1~5단계)
	}

	private ArrayList<String> loadWordsWithLength(int length) {
		ArrayList<String> filteredWords = new ArrayList<>();
		for (String word : words) {
			if (word.length() == length) {
				filteredWords.add(word);
			}
		}
		return filteredWords;
	}

	public Catchword() {
		setTitle("한글 단어 맞추기 게임");
		setSize(500, 500);
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		chooseDifficulty();
		currentWordIndex = random.nextInt(words.size());
		targetWord = words.get(currentWordIndex);

		// 상단 패널 및 목표 단어, 단계 표시 레이블 설정
		JPanel topPanel = new JPanel(new BorderLayout());

		levelLabel = new JLabel(getLevelText());
		levelLabel.setHorizontalAlignment(SwingConstants.LEFT);
		levelLabel.setFont(new Font("돋움", Font.PLAIN, 16));
		topPanel.add(levelLabel, BorderLayout.WEST);

		targetLabel = new JLabel("목표 단어: " + targetWord);
		targetLabel.setHorizontalAlignment(SwingConstants.CENTER);
		targetLabel.setFont(new Font("돋움", Font.BOLD, 40));
		topPanel.add(targetLabel, BorderLayout.CENTER);
		add(topPanel, BorderLayout.NORTH);

		// 하단의 타이머 레이블 설정
		timerLabel = new JLabel("남은 시간: " + time + "초");
		timerLabel.setFont(new Font("돋움", Font.BOLD, 18));
		add(timerLabel, BorderLayout.SOUTH);

		// 3x3 버튼 패널 설정
		JPanel gridPanel = new JPanel();
		gridPanel.setLayout(new GridLayout(3, 3));
		add(gridPanel, BorderLayout.CENTER);

		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				buttons[i][j] = new JButton();
				buttons[i][j].setFont(new Font("돋움", Font.BOLD, 40));
				buttons[i][j].addActionListener(this);
				buttons[i][j].setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
				gridPanel.add(buttons[i][j]);
				buttons[i][j].setUI(new Button());
			}
		}

		// 메뉴바 설정
		JMenuBar menuBar = new JMenuBar();
		JMenu gameMenu = new JMenu("게임");
		JMenuItem exitItem = new JMenuItem("종료");
		exitItem.addActionListener(e -> System.exit(0));
		gameMenu.add(exitItem);
		menuBar.add(gameMenu);
		setJMenuBar(menuBar);

		shuffleButtons();
		startTimer();
	}

	// 타이머 설정 메서드
	private void startTimer() {
		timer = new Timer(1000, new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				time--;
				timerLabel.setText("남은 시간: " + time + "초");

				if (time == 0) {
					timer.stop();
					JOptionPane.showMessageDialog(Catchword.this, "시간 초과! 게임이 종료되었습니다.");
					showFinalScore(score);
				}
			}
		});
		timer.start();
	}

	// 게임을 초기화하는 메서드 (제한 시간을 재설정하지 않음)
	private void resetGame() {
		currentIndex = 0;
		currentWordIndex = random.nextInt(words.size());
		targetWord = words.get(currentWordIndex);
		targetLabel.setText("목표 단어: " + targetWord);
		levelLabel.setText(getLevelText()); // 단계 및 문제 번호 업데이트
		resetButtonBorders(); // 버튼 테두리 초기화
		resetButtonColors();  // 버튼 색상 초기화
		shuffleButtons();
	}

	private void resetButtonColors() {
		// TODO Auto-generated method stub
		
	}

	// 버튼을 무작위로 섞는 메서드
	private void shuffleButtons() {
		ArrayList<Character> chars = new ArrayList<>();

		for (char c : targetWord.toCharArray()) {
			chars.add(c);
		}

		while (chars.size() < 9) {
			chars.add((char) ('가' + Math.random() * (('힣' - '가') + 1)));
		}

		Collections.shuffle(chars);
		int index = 0;
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				buttons[i][j].setText(chars.get(index).toString());
				index++;
			}
		}
	}

	// 파일에서 단어 목록을 로드하는 메서드
	private ArrayList<String> loadWordsFromFile(String filename) {
		ArrayList<String> wordList = new ArrayList<>();
		Scanner filein = openFile(filename);

		while (filein.hasNext()) {
			wordList.add(filein.next());
		}

		filein.close();
		return wordList;
	}

	// 파일을 여는 메서드
	private Scanner openFile(String filename) {
		Scanner filein = null;
		try {
			filein = new Scanner(new File(filename));
		} catch (Exception e) {
			System.out.printf("파일 오픈 실패: %s\n", filename);
			throw new RuntimeException(e);
		}
		return filein;
	}

	@Override
	public void actionPerformed(ActionEvent e) {
	    JButton clickedButton = (JButton) e.getSource();
	    String clickedText = clickedButton.getText();

	    if (clickedText.charAt(0) == targetWord.charAt(currentIndex)) {
	        // 마지막 글자인지 확인하고, 맞다면 초록색 테두리 적용
	        if (currentIndex == targetWord.length() - 1) {
	            clickedButton.setBorder(new LineBorder(Color.GREEN, 3));
	            totalScore += score;
	            roundsCompleted++;
	            JOptionPane.showMessageDialog(this, "정답! 다음 문제로 넘어갑니다.");
	            currentIndex = 0;
	            if (roundsCompleted % MAX_ROUNDS == 0) {
	                timer.stop();
	                int response = JOptionPane.showConfirmDialog(this, "다음 단계로 넘어가시겠습니까?", "단계 완료", JOptionPane.YES_NO_OPTION);
	                if (response == JOptionPane.YES_OPTION) {
	                    if (currentLevel < difficulties.length) {
	                        currentLevel++;
	                        chooseDifficulty();
	                    } else {
	                        JOptionPane.showMessageDialog(this, "모든 단계를 완료했습니다. 게임을 종료합니다.");
	                        showFinalScore(totalScore);
	                        return;
	                    }
	                } else {
	                    JOptionPane.showMessageDialog(this, "게임을 종료합니다.");
	                    showFinalScore(totalScore);
	                    return;
	                }
	            }
	            resetGame();
	        } else {
	            clickedButton.setBorder(new LineBorder(Color.BLACK, 3));
	            currentIndex++;
	        }
	    } else {
	        clickedButton.setBorder(new LineBorder(Color.RED, 3));
	        JOptionPane.showMessageDialog(this, "오답! 다시 시도하세요.");
	        currentIndex = 0;
	        resetGame();
	    }
	    shuffleButtons();
	}





	// 모든 버튼의 테두리를 초기화하는 메서드
	private void resetButtonBorders() {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++) {
				buttons[i][j].setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
			}
		}
	}
	
	private String getLevelText() {
		return "난이도: " + currentLevel + " 단계 | 문제 번호: " + ((roundsCompleted % MAX_ROUNDS) + 1) + "/" + MAX_ROUNDS;
	}

	private void showFinalScore(int score) {
		if (time == 0) {
			finalScore = score;
		} else {
			finalScore = score * time;
		}
		JOptionPane.showMessageDialog(this, "최종 점수: " + finalScore + "점");
	}

	public static void main(String[] args) {
		Catchword game = new Catchword();
		game.setVisible(true);
	}
}


